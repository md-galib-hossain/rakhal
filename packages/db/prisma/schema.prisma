// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Two enums from your diagram
enum BreedType {
  NATIVE
  CROSS_BRED
  EXOTIC
}

enum BreedingStatus {
  OPEN
  INSEMINATED
  PREGNANT
  MAYBE_PREGNANT
  DRY
  ISSUE
  MILKING_COW
}

/// (Optional) your auth user model—if you already have one, merge accordingly.
model User {
  id    String  @id @default(uuid())
  email String  @unique
  name  String?
  farms Farm[]
}

/// CowType lookup table
model CowType {
  id        String   @id @default(uuid())
  typeName  String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cows Cow[]
}

/// The core Cow model
model Cow {
  id                 String          @id @default(uuid())
  tag                String          @unique
  farmId             String
  cowTypeId          String?
  currentGroupId     String? // points to the cow’s current Group
  currentShadeId     String? // points to the cow’s current Shade
  dob                DateTime?
  breedType          BreedType?
  hasDeliveredBefore Boolean         @default(false)
  breedingStatus     BreedingStatus?
  familyId           String?
  gender             String?
  isActive           Boolean         @default(true)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  farm         Farm       @relation(fields: [farmId], references: [id])
  cowType      CowType?   @relation(fields: [cowTypeId], references: [id])
  currentGroup Group?     @relation("CurrentGroup", fields: [currentGroupId], references: [id])
  currentShade Shade?     @relation("CurrentShade", fields: [currentShadeId], references: [id])
  groupHistory CowGroup[]
  shadeHistory CowShade[]

  @@index([farmId])
  @@index([cowTypeId])
  @@index([currentGroupId])
  @@index([currentShadeId])
}

/// A Farm belongs to a User (owner), has many Groups, Shades, and Cows
model Farm {
  id        String   @id @default(uuid())
  ownerId   String
  name      String
  location  String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner  User    @relation(fields: [ownerId], references: [id])
  groups Group[]
  shades Shade[]
  cows   Cow[]
}

/// A Shade within a Farm; CowShade tracks history, currentCows is the “live” assignment
model Shade {
  id          String   @id @default(uuid())
  farmId      String
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  farm        Farm       @relation(fields: [farmId], references: [id])
  currentCows Cow[]      @relation("CurrentShade")
  history     CowShade[]

  @@unique([farmId, name])
}

/// Join table to track every time a Cow is assigned to a Shade
model CowShade {
  id         String   @id @default(uuid())
  cowId      String
  shadeId    String
  assignedAt DateTime @default(now())

  cow   Cow   @relation(fields: [cowId], references: [id])
  shade Shade @relation(fields: [shadeId], references: [id])

  @@unique([cowId, shadeId, assignedAt])
  @@index([cowId])
  @@index([shadeId])
}

/// Join table to track every time a Cow is assigned to a Group
model CowGroup {
  id         String   @id @default(uuid())
  cowId      String
  groupId    String
  assignedAt DateTime @default(now())

  cow   Cow   @relation(fields: [cowId], references: [id])
  group Group @relation(fields: [groupId], references: [id])

  @@unique([cowId, groupId, assignedAt])
  @@index([cowId])
  @@index([groupId])
}

/// A Group within a Farm; CowGroup tracks history, currentCows is the “live” assignment
model Group {
  id          String   @id @default(uuid())
  farmId      String
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  farm        Farm       @relation(fields: [farmId], references: [id])
  currentCows Cow[]      @relation("CurrentGroup")
  history     CowGroup[]

  @@unique([farmId, name])
}
